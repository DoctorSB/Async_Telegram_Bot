import emoji
import os

from aiogram import types
from aiogram.dispatcher .filters .state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from keyboards.default import panel_choose_target, panel_choose_pack, cancel_panel
from settings.loader import bot, dp
from settings.state import BotState

user = 0

# —Å—Ç–∞—Ä—Ç


@dp.message_handler(commands=['start'])
async def hello(message: types.Message) -> None:
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEHL09ju_NYDBqyTq65N1BJqyacddxvSQACHxEAAowt_QcWMfHxvTZjli0E'),
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ –º–∏–ª–æ–µ ' + emoji.emojize('ü•∞') + '–ö—Ç–æ –±—É–¥–µ—Ç —ç—Ç–∏–º —Å—á–∞—Å—Ç–∏–≤—á–∏–∫–æ–º?')
    await bot.send_message(message.chat.id, '–ö–æ–≥–æ –º—ã –±—É–¥–µ–º —Ä–∞–¥–æ–≤–∞—Ç—å?', reply_markup=panel_choose_target)

# –æ—Ç–º–µ–Ω–∞


@dp.message_handler(text='–û—Ç–º–µ–Ω–∞')
async def cancel(state: FSMContext) -> None:
    current_state = state.get_state()
    if current_state is None:
        return
    await state.finish()

# —Ö–æ—á—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@dp.message_handler(text='–•–æ—á—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state=None)
async def chsv(message: types.Message) -> None:
    await BotState.forwarding.set()
    await message.answer("–•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø—É–ø—Å–∏–∫–∞", reply_markup=cancel_panel)

# –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@dp.message_handler(state=BotState.forwarding, content_types=types.ContentTypes.ANY)
async def get_id_from_forward(message: types.message, state: FSMContext):
    try:
        user = message.forward_from.id
    except AttributeError:
        if 'forward_sender_name' in message:
            await message.answer('–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            return  
        await message.answer('–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return
    print(message)
    async with state.proxy() as data:
        data ['id'] = message.forward_from.id
        user = data['id']
    await message.answer(user)
    await folder_generator(user)
    print(user, BotState.forwarding, BotState.on_other)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ id


@dp.message_handler(text='–•–æ—á—É –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º')
async def get_id_from_user(message: types.message):
    await message.answer('–•–æ—Ä–æ—à–æ! –ü–æ–ª—É—á–∞—é —Ç–≤–æ–π id ...' + emoji.emojize(' ü§î'))
    user = message.from_user.id
    await message.answer(f'–í–æ—Ç —Ç–≤–æ–π id: {user}!', reply_markup=panel_choose_target)
    print(message)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
# @dp.message_handler(text='–•–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É')
# async def get_id_from_message(message: types.message):
#     await message.answer('–û—Ç–ª–∏—á–Ω–æ' + emoji.emojize(' ü§î'))
#     user = message.from_user.id
#     await message.answer(f'–í–æ—Ç —Ç–≤–æ–π id: {user}!', reply_markup=panel_choose_target)
#     await folder_generator(user)

# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data


async def folder_generator(user):
    os.mkdir("./data/{}".format(user))


async def start():
    await dp.start_polling(bot)
